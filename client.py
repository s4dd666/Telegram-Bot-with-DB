# –ò–º–ø–æ—Ä—Ç—ã
from aiogram import types, Dispatcher
import asyncio

# –ò–º–ø–æ—Ä—Ç—ã —Å —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
from data_base import User, Message, db

from create_bot import dp, bot

from config import *

from admin import FSMContext, State, UserState


# *****************************************************************************************************
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

# –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	id = message.from_user.id
	if id == Admin:
		await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}.\n"
		                     f"–¢—ã –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
		                     f"\n–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥, –Ω–∞–∂–º–∏:\n/admin\n"
		                     f"\n–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –Ω–∞–∂–º–∏:\n/menu\n\n"
		                     )
	else:
		await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}.\n"
		                     f"\n–Ø, –±–æ—Ç-–∫–ª–æ—É–Ω ü§° \n"
		                     f"–Ø –∫–∞–∫ —Ç—ã, —Ç–æ–ª—å–∫–æ –±–æ—Ç ü§° \n"
		                     f"\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏:\n/menu\n\n"
		                     )

# @dp.message_handler(commands=['admin'], user_id=Admin)
@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	id = message.from_user.id
	if id == Admin:
		await message.answer(f"–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é!\n\n"
		                     f"–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ë–î:\n/mailing"
		                     f"\n\n–ù–∞–∑–∞–¥ –≤ /menu")
	else:
		await message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ"
		                     f"\n\n–ù–∞–∑–∞–¥ –≤ /menu")


# –•–µ–Ω–¥–ª–µ—Ä –≤—ã–∑–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(commands=['menu'])
async def cmd_menu(message: types.Message):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	id = message.from_user.id
	if id == Admin:
		await message.answer('\n–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n'
		                     '/admin\n'

		                     '\n–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:'
		                     '\n/joke\n'

		                     '\nC—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
		                     '/stats\n'

		                     '\nTelegram ID:'
		                     '\n/id\n'

		                     '\n–ö–æ–Ω—Ç–∞–∫—Ç—ã:'
		                     '\n/twitch'
		                     '\n/discord'
		                     '\n/telegram\n'

		                     '\n–í –Ω–∞—á–∞–ª–æ:\n'
		                     '/start\n'
		                     )

	else:
		await message.answer('\n–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:'
		                     '\n/joke\n'

		                     '\nC—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
		                     '/stats\n'

		                     '\nTelegram ID:'
		                     '\n/id\n'

		                     '\n–ö–æ–Ω—Ç–∞–∫—Ç—ã:'
		                     '\n/twitch'
		                     '\n/discord'
		                     '\n/telegram\n'

		                     '\n–í –Ω–∞—á–∞–ª–æ:\n'
		                     '/start\n'
		                     )


@dp.message_handler(commands=['id'])
async def cmd_id(message: types.Message):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	await message.answer(f"–¢–≤–æ–π Telegram ID: {message.from_user.id}\n\n–ù–∞–∑–∞–¥ –≤ /menu")

# *****************************************************************************************************
# –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:
@dp.message_handler(commands=['telegram'])
async def cmd_telegram(message: types.Message):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	await message.answer('[–î–∏—Ä–µ–∫—Ç–æ—Ä —Ü–∏—Ä–∫–∞:](https://t.me/s4dd666)', parse_mode='Markdown')
	await message.answer('\n\n–ù–∞–∑–∞–¥ –≤ /menu')

@dp.message_handler(commands=['twitch'])
async def cmd_twitch(message: types.Message):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	await message.answer('[–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–ª–æ—É–Ω–∞:](https://www.twitch.tv/s4dd666)', parse_mode='Markdown')
	await message.answer('\n\n–ù–∞–∑–∞–¥ –≤ /menu')

@dp.message_handler(commands=['discord'])
async def cmd_discord(message: types.Message):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	await message.answer('[–¶–∏—Ä–∫ "–®–∞–ø–∏—Ç–æ":](https://discord.gg/VS8SvUC)', parse_mode='Markdown')
	await message.answer('\n\n–ù–∞–∑–∞–¥ –≤ /menu')

# *****************************************************************************************************
# –§–∞–Ω
@dp.message_handler(commands=['joke'])
async def cmd_joke(message: types.Message):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è

	import random
	from joke_list import jokes

	await asyncio.sleep(0.5)
	await message.answer('–î–µ—Ä–∂–∏ —Ä–∞–∑—Ä—ã–≤–Ω—É—é:')
	await asyncio.sleep(1)
	await message.answer(random.choice(jokes))
	photo = open('pic/capibara.jpg', 'rb')
	await asyncio.sleep(0.1)
	await bot.send_photo(message.from_user.id, photo)
	await asyncio.sleep(1.5)
	await message.answer("–ù—É –∫–∞–∫, –ø–æ–µ–ª —à—É—Ç–æ—á–µ–∫?\n–ö–ª–æ—É–Ω!ü§°\n\n–ò–ª–∏ –µ—â—ë –Ω–∞—Å—ã–ø–∞—Ç—å?\n/joke\n\n–ù–∞–∑–∞–¥ –≤ /menu")


# –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message_handler(commands=['stats'])
async def cmd_stats(message: types.Message):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è

	with db: # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
		users = User.select().where(User.user_id != 0)
		await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(users)}')

	with db: # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
		messages = Message.select().where(Message.user_id != 0)
		await message.answer(f'–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É: {len(messages)}')

	with db: # –ü–æ–¥—Å—á—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞
		self_messages = Message.select(Message.telegram_id).where(message.from_user.id == Message.telegram_id)
	await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–∞—Å: {len(self_messages)}')
	await message.answer('\n\n–ù–∞–∑–∞–¥ –≤ /menu')

# *****************************************************************************************************
# FSM –ú–æ–¥—É–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(commands=['mailing'])
async def mailing(message: types.Message):
	id = message.from_user.id
	if id == Admin:
		await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
		await UserState.text.set()
	else:
		await message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ"
		                     f"\n\n–ù–∞–∑–∞–¥ –≤ /menu")


@dp.message_handler(state=UserState.text)
async def get_username(message: types.Message, state: FSMContext):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	await state.update_data(username=message.text)
	await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
	                     f"–ß—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –Ω–∞–ø–∏—à–∏—Ç–µ: Cansel")
	await UserState.next()  # –ª–∏–±–æ –∂–µ UserState.adress.set()


@dp.message_handler(state=UserState.confirm)
async def get_address(message: types.Message, state: FSMContext):
	await state.update_data(address=message.text)
	data = await state.get_data()
	if message.text == 'Cansel':
		await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n'
		                     f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É, –Ω–∞–∂–º–∏—Ç–µ:\n'
		                     f'/mailing')
		await state.finish()
		elif message.text == Password:
		with db:
			query = (User.select())
			count = 0
			for all_users in query:
				count += 1
				All = (all_users.telegram_id)
				await bot.send_message(All, f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –ê–¥–º–∏–Ω–∞ {message.from_user.username}:\n"
				                            f"\n{data['username']}\n")

		await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
		                     f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤c–µ–≥–æ: {count}\n"
		                     f"\n–ù–∞–∑–∞–¥ –≤ /menu")
		await state.finish()
	else:
		await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á\n\n'
		                     '–ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å /admin'
		                     '\n–ù–∞–∑–∞–¥ –≤ /menu'
		                     )
		await state.finish()

# *****************************************************************************************************
# –û—Ç–≤–µ—Ç –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
@dp.message_handler()
async def empty(message: types.Message):
	await log(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	await asyncio.sleep(1.5)
	await message.answer('–î–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n'
	                     '–õ–∏–±–æ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞\n'
	                     )
	await asyncio.sleep(0.5)
	await message.answer('\n\n–ù–∞–∑–∞–¥ –≤ /menu')

# *****************************************************************************************************
# –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–≥–∏–Ω–≥ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
async def log(message: types.Message):
	# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
	create_or_update = (User
	                    .insert(telegram_id=message.from_user.id, user_name=message.from_user.username,
	                            first_name=message.from_user.first_name, last_name=message.from_user.last_name,
	                            date_time_join=message.date)
	                    .on_conflict(
		conflict_target=[User.telegram_id],
		preserve=[User.telegram_id],
		update={
			'user_name': message.from_user.username,
			'first_name': message.from_user.first_name,
			'last_name': message.from_user.last_name})
	                    .execute())

	# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
	create_message = Message.insert([
		{'telegram_id': message.from_user.id,
		 'user_name': message.from_user.username,
		 'first_name': message.from_user.first_name,
		 'message_text': message.text,
		 'date_time_add': message.date}
	]).execute()

# *****************************************************************************************************
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –≤ –î–∏—Å–ø–µ—á–µ—Ä–µ
def register_handlers_client(dp: Dispatcher):
	dp.register_message_handler(cmd_start, commands=['start'])
	dp.register_message_handler(cmd_menu, commands=['menu'])

	dp.register_message_handler(cmd_telegram, commands=['telegram'])
	dp.register_message_handler(cmd_twitch, commands=['twitch'])
	dp.register_message_handler(cmd_discord, commands=['discord'])
	dp.register_message_handler(cmd_stats, commands=['stats'])
	dp.register_message_handler(cmd_id, commands=['id'])

	dp.register_message_handler(cmd_joke, commands=['joke'])

	dp.register_message_handler(empty)

	dp.register_message_handler(mailing, commands=['mailing'])
	dp.register_message_handler(get_username)
	dp.register_message_handler(get_address)
